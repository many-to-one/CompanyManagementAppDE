# Stage 1: Build Python environment
FROM python:3.9 as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1


# Install system dependencies
RUN apt-get update \
    # apt-get upgrade -y \
    && apt-get install -y --no-install-recommends \
        # psycopg2 \
        postgresql \
        python3-dev \
        musl-dev \
        build-essential \
        gcc \
        libpq-dev \
        postgresql-client \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* 

# Create and set the working directory
RUN mkdir /usr/src/app
WORKDIR /usr/src/app

# Copy requirements file to the container
COPY requirements.txt /usr/src/app/

# Create the "wheels" directory
# RUN mkdir /usr/src/app/wheels

# Install Python dependencies to a temporary directory
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev    # Install the PostgreSQL library \
    pip install --upgrade pip \
    pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

    

####################################

# Stage 2: Final image
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# new
# RUN mkdir -p /home/user


# create the app user
# RUN addgroup -S app && adduser -S app -G app

# RUN mkdir /home/admin
# RUN mkdir /home/admin/app

ENV HOME=/home/admin
ENV APP_HOME=/home/admin/CompanyManagementAppDE
# RUN mkdir $APP_HOME/staticfiles
# RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME

# create a new group named "app" 
RUN groupadd app
RUN useradd -m -g app app -p adestadmin
RUN usermod -aG app app


# netcat-traditional for Debian 12
RUN apt-get update && \
    apt-get install -y netcat-traditional && \ 
    apt-get clean && \
    # apt-get install libpq-dev \
    rm -rf /var/lib/apt/lists/*  


# Copy Python dependencies from the builder stage
# COPY --from=builder /wheels /wheels
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
# Install Python dependencies from wheels
RUN pip install --no-cache /wheels/*

# Copy entrypoint and Django application code to the container
COPY ./entrypoint.sh $APP_HOME
RUN chmod +x  $APP_HOME/entrypoint.sh
COPY . $APP_HOME

# Collect static files
# RUN python manage.py collectstatic --noinput

# Change ownership of $APP_HOME to the non-root user
RUN chown -R app:app $APP_HOME

# Switch to the non-root user
USER app

# Set the entrypoint for the container
# ENTRYPOINT [ "/home/admin/CompanyManagementAppDE/entrypoint.sh" ]